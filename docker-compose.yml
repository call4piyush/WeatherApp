version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: weather-postgres
    environment:
      POSTGRES_DB: weatherdb
      POSTGRES_USER: weatheruser
      POSTGRES_PASSWORD: weatherpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - weather-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weatheruser -d weatherdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: weather-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: weatheruser
      DB_PASSWORD: weatherpass
      OPENWEATHER_API_KEY: d2929e9483efc82c82c32ee7e02d563e
      ADMIN_PASSWORD: admin123
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - weather-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/weather/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: weather-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - weather-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  weather-network:
    driver: bridge

volumes:
  postgres_data: 