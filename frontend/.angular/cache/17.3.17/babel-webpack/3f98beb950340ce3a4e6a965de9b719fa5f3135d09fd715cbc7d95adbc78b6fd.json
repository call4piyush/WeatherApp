{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/weather.service\";\nimport * as i2 from \"./services/city.service\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(weatherService, cityService) {\n      this.weatherService = weatherService;\n      this.cityService = cityService;\n      this.title = 'Weather Forecast App';\n      // Weather data\n      this.weatherForecasts = [];\n      this.currentCity = '';\n      // City search\n      this.searchCity = '';\n      this.searchInput$ = new Subject();\n      this.citySuggestions = [];\n      this.showSuggestions = false;\n      this.selectedCityIndex = -1;\n      // State management\n      this.loading$ = new BehaviorSubject(false);\n      this.cityLoading$ = new BehaviorSubject(false);\n      this.error = null;\n      this.cityError = null;\n      // Offline mode\n      this.offlineMode$ = new BehaviorSubject(false);\n      this.cachedCities = [];\n      // Component lifecycle\n      this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n      this.setupCitySearch();\n      this.loadCachedCities();\n      // Subscribe to observables\n      this.weatherService.offlineMode$.pipe(takeUntil(this.destroy$)).subscribe(offline => this.offlineMode$.next(offline));\n      this.weatherService.loading$.pipe(takeUntil(this.destroy$)).subscribe(loading => this.loading$.next(loading));\n      // Subscribe to city service observables\n      this.cityService.searchResults$.pipe(takeUntil(this.destroy$)).subscribe(cities => {\n        this.citySuggestions = cities;\n        this.showSuggestions = cities.length > 0;\n      });\n      this.cityService.loading$.pipe(takeUntil(this.destroy$)).subscribe(loading => this.cityLoading$.next(loading));\n      this.cityService.error$.pipe(takeUntil(this.destroy$)).subscribe(error => this.cityError = error);\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    setupCitySearch() {\n      // Setup debounced city search\n      this.cityService.createDebouncedSearch(this.searchInput$).pipe(takeUntil(this.destroy$)).subscribe();\n    }\n    onSearchInputChange() {\n      this.searchInput$.next(this.searchCity);\n      this.selectedCityIndex = -1;\n    }\n    onInputFocus() {\n      if (this.citySuggestions.length > 0) {\n        this.showSuggestions = true;\n      }\n    }\n    onInputBlur() {\n      // Delay hiding suggestions to allow click events\n      setTimeout(() => {\n        this.showSuggestions = false;\n        this.selectedCityIndex = -1;\n      }, 200);\n    }\n    onKeyDown(event) {\n      if (!this.showSuggestions || this.citySuggestions.length === 0) {\n        return;\n      }\n      switch (event.key) {\n        case 'ArrowDown':\n          event.preventDefault();\n          this.selectedCityIndex = Math.min(this.selectedCityIndex + 1, this.citySuggestions.length - 1);\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          this.selectedCityIndex = Math.max(this.selectedCityIndex - 1, -1);\n          break;\n        case 'Enter':\n          event.preventDefault();\n          if (this.selectedCityIndex >= 0) {\n            this.selectCity(this.citySuggestions[this.selectedCityIndex]);\n          } else if (this.searchCity.trim()) {\n            this.searchWeather();\n          }\n          break;\n        case 'Escape':\n          this.showSuggestions = false;\n          this.selectedCityIndex = -1;\n          break;\n      }\n    }\n    selectCity(city) {\n      this.searchCity = city.name;\n      this.currentCity = city.name;\n      this.showSuggestions = false;\n      this.selectedCityIndex = -1;\n      this.searchWeather();\n    }\n    searchWeather() {\n      if (!this.searchCity?.trim()) {\n        this.error = 'Please enter a city name';\n        return;\n      }\n      this.error = null;\n      this.currentCity = this.searchCity.trim();\n      const offline = this.offlineMode$.value;\n      if (offline) {\n        this.getOfflineWeather();\n      } else {\n        this.getOnlineWeather();\n      }\n    }\n    getOnlineWeather() {\n      this.weatherService.getWeatherForecast(this.currentCity, false).pipe(takeUntil(this.destroy$)).subscribe({\n        next: response => {\n          this.weatherForecasts = response.forecasts || [];\n          this.error = null;\n          if (response.from_cache && !this.offlineMode$.value) {\n            this.error = 'Weather service temporarily unavailable. Showing cached data.';\n          }\n          this.addToCachedCities(this.currentCity);\n        },\n        error: error => {\n          console.error('Weather fetch error:', error);\n          this.error = error.message || 'Failed to fetch weather data. Please try again.';\n          this.weatherForecasts = [];\n        }\n      });\n    }\n    getOfflineWeather() {\n      this.weatherService.getOfflineWeatherData(this.currentCity).pipe(takeUntil(this.destroy$)).subscribe({\n        next: response => {\n          this.weatherForecasts = response.forecasts || [];\n          this.error = null;\n        },\n        error: error => {\n          console.error('Offline weather fetch error:', error);\n          this.error = error.message || 'No offline data available for this city.';\n          this.weatherForecasts = [];\n        }\n      });\n    }\n    toggleOfflineMode() {\n      const newMode = !this.offlineMode$.value;\n      this.offlineMode$.next(newMode);\n      this.weatherService.setOfflineMode(newMode);\n      if (newMode) {\n        this.error = 'Offline mode enabled. Using cached data only.';\n      } else {\n        this.error = 'Online mode enabled. Live weather data available.';\n        setTimeout(() => {\n          if (this.error === 'Online mode enabled. Live weather data available.') {\n            this.error = null;\n          }\n        }, 3000);\n      }\n    }\n    loadCachedCities() {\n      try {\n        const cached = localStorage.getItem('weather-cached-cities');\n        this.cachedCities = cached ? JSON.parse(cached) : [];\n      } catch (error) {\n        console.warn('Failed to load cached cities:', error);\n        this.cachedCities = [];\n      }\n    }\n    addToCachedCities(city) {\n      if (!this.cachedCities.includes(city)) {\n        this.cachedCities.unshift(city);\n        this.cachedCities = this.cachedCities.slice(0, 10); // Keep only last 10\n        try {\n          localStorage.setItem('weather-cached-cities', JSON.stringify(this.cachedCities));\n        } catch (error) {\n          console.warn('Failed to save cached cities:', error);\n        }\n      }\n    }\n    selectCachedCity(city) {\n      this.searchCity = city;\n      this.currentCity = city;\n      this.searchWeather();\n    }\n    getWeatherIcon(condition) {\n      const iconMap = {\n        'Clear': '‚òÄÔ∏è',\n        'Clouds': '‚òÅÔ∏è',\n        'Rain': 'üåßÔ∏è',\n        'Drizzle': 'üå¶Ô∏è',\n        'Thunderstorm': '‚õàÔ∏è',\n        'Snow': 'üå®Ô∏è',\n        'Mist': 'üå´Ô∏è',\n        'Fog': 'üå´Ô∏è',\n        'Haze': 'üå´Ô∏è',\n        'Unknown': '‚ùì'\n      };\n      return iconMap[condition] || 'üå§Ô∏è';\n    }\n    getAlertClass(condition) {\n      const alertMap = {\n        'Thunderstorm': 'alert-danger',\n        'Rain': 'alert-info',\n        'Drizzle': 'alert-info',\n        'Snow': 'alert-warning',\n        'Unknown': 'alert-secondary'\n      };\n      return alertMap[condition] || 'alert-success';\n    }\n    formatDate(dateString) {\n      try {\n        const date = new Date(dateString);\n        const options = {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric'\n        };\n        return date.toLocaleDateString('en-US', options);\n      } catch (error) {\n        return dateString;\n      }\n    }\n    static {\n      this.…µfac = function AppComponent_Factory(t) {\n        return new (t || AppComponent)(i0.…µ…µdirectiveInject(i1.WeatherService), i0.…µ…µdirectiveInject(i2.CityService));\n      };\n    }\n    static {\n      this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n        type: AppComponent,\n        selectors: [[\"app-root\"]],\n        standalone: true,\n        features: [i0.…µ…µStandaloneFeature],\n        decls: 0,\n        vars: 0,\n        template: function AppComponent_Template(rf, ctx) {},\n        dependencies: [CommonModule, FormsModule],\n        styles: [\".app-container[_ngcontent-%COMP%]{font-family:Inter,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif;font-size:16px;line-height:1.6;color:#343a40;min-height:100vh;display:flex;flex-direction:column;background:linear-gradient(135deg,#74b9ff,#0984e3)}.header[_ngcontent-%COMP%]{background:#ffffff1a;-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);border-bottom:1px solid rgba(255,255,255,.2);padding:1.5rem 0}.header[_ngcontent-%COMP%]   .app-title[_ngcontent-%COMP%]{font-size:2rem;font-weight:700;color:#fff;margin-bottom:.25rem}.header[_ngcontent-%COMP%]   .app-title[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:.5rem;color:gold}.header[_ngcontent-%COMP%]   .app-subtitle[_ngcontent-%COMP%]{color:#fffc;margin-bottom:0;font-size:1rem}.status-indicator[_ngcontent-%COMP%]   .status-badge[_ngcontent-%COMP%]{display:inline-flex;align-items:center;padding:.5rem 1rem;border-radius:2rem;font-size:.875rem;font-weight:500}.status-indicator[_ngcontent-%COMP%]   .status-badge.online[_ngcontent-%COMP%]{background:#28a74533;color:#28a745;border:1px solid rgba(40,167,69,.3)}.status-indicator[_ngcontent-%COMP%]   .status-badge.offline[_ngcontent-%COMP%]{background:#ffc10733;color:#ffc107;border:1px solid rgba(255,193,7,.3)}.status-indicator[_ngcontent-%COMP%]   .status-badge[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:.5rem}.main-content[_ngcontent-%COMP%]{flex:1;padding:2rem 0}.search-section[_ngcontent-%COMP%]{margin-bottom:2rem}.search-section[_ngcontent-%COMP%]   .search-card[_ngcontent-%COMP%]{background:#fffffff2;-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);border:1px solid rgba(255,255,255,.2);border-radius:.375rem;box-shadow:0 .5rem 1rem #00000026}.search-form[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]{position:relative}.search-form[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]{border:2px solid transparent;background:#ffffffe6}.search-form[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]:focus{border-color:#007bff;box-shadow:0 0 0 .2rem #007bff40;background:#fff}.search-form[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{border-radius:0 .375rem .375rem 0}.autocomplete-container[_ngcontent-%COMP%]{position:relative;flex:1}.autocomplete-container[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]{width:100%;border-radius:.375rem 0 0 .375rem}.suggestions-dropdown[_ngcontent-%COMP%]{position:absolute;top:100%;left:0;right:0;background:#fff;border:1px solid #dee2e6;border-top:none;border-radius:0 0 .375rem .375rem;box-shadow:0 .5rem 1rem #00000026;max-height:300px;overflow-y:auto;z-index:1000}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestions-header[_ngcontent-%COMP%], .suggestions-dropdown[_ngcontent-%COMP%]   .suggestions-footer[_ngcontent-%COMP%]{padding:.5rem 1rem;background:#f8f9fa;border-bottom:1px solid #dee2e6}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestions-header[_ngcontent-%COMP%]:last-child, .suggestions-dropdown[_ngcontent-%COMP%]   .suggestions-footer[_ngcontent-%COMP%]:last-child{border-bottom:none}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:.75rem 1rem;cursor:pointer;transition:background-color .15s ease;border-bottom:1px solid #f8f9fa}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]:last-child{border-bottom:none}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]:hover, .suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item.selected[_ngcontent-%COMP%]{background:#e3f2fd}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]   .city-info[_ngcontent-%COMP%]{flex:1}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]   .city-info[_ngcontent-%COMP%]   .city-name[_ngcontent-%COMP%]{font-weight:500;color:#343a40;margin-bottom:.25rem}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]   .city-info[_ngcontent-%COMP%]   .city-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:.5rem;color:#007bff}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]   .city-info[_ngcontent-%COMP%]   .city-details[_ngcontent-%COMP%]{font-size:.875rem}.suggestions-dropdown[_ngcontent-%COMP%]   .suggestion-item[_ngcontent-%COMP%]   .city-flag[_ngcontent-%COMP%]{font-size:.75rem;font-weight:500;color:#6c757d;background:#f8f9fa;padding:.25rem .5rem;border-radius:.25rem}.offline-toggle[_ngcontent-%COMP%]   .form-check-label[_ngcontent-%COMP%]{font-size:.875rem;color:#6c757d;cursor:pointer}.offline-toggle[_ngcontent-%COMP%]   .form-check-input[_ngcontent-%COMP%]:checked{background-color:#ffc107;border-color:#ffc107}.cached-cities[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{font-size:.75rem;padding:.25rem .5rem}.weather-results[_ngcontent-%COMP%]   .weather-header[_ngcontent-%COMP%]{text-align:center;margin-bottom:2rem}.weather-results[_ngcontent-%COMP%]   .weather-header[_ngcontent-%COMP%]   .city-name[_ngcontent-%COMP%]{font-size:2rem;font-weight:600;color:#fff;margin-bottom:.5rem}.weather-results[_ngcontent-%COMP%]   .weather-header[_ngcontent-%COMP%]   .city-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:.5rem;color:gold}.weather-results[_ngcontent-%COMP%]   .weather-header[_ngcontent-%COMP%]   .weather-meta[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%]{font-size:.875rem;padding:.5rem 1rem}.weather-card[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]{border:none;border-radius:.375rem;box-shadow:0 .125rem .25rem #00000013;transition:transform .2s ease,box-shadow .2s ease;background:#fffffff2;-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px)}.weather-card[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]:hover{transform:translateY(-2px);box-shadow:0 .5rem 1rem #00000026}.weather-card.today[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]{border:2px solid #007bff;box-shadow:0 0 20px #007bff4d}.weather-card[_ngcontent-%COMP%]   .weather-date[_ngcontent-%COMP%]   .card-title[_ngcontent-%COMP%]{font-size:1.1rem;font-weight:600;margin-bottom:1rem;color:#343a40}.weather-card[_ngcontent-%COMP%]   .weather-date[_ngcontent-%COMP%]   .day-label[_ngcontent-%COMP%]{font-size:.75rem;background:#007bff;color:#fff;padding:.25rem .5rem;border-radius:1rem;margin-left:.5rem}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:1rem}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]   .temperature-main[_ngcontent-%COMP%]   .temp-high[_ngcontent-%COMP%]{font-size:2rem;font-weight:700;color:#343a40}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]   .temperature-main[_ngcontent-%COMP%]   .temp-divider[_ngcontent-%COMP%]{margin:0 .5rem;color:#6c757d}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]   .temperature-main[_ngcontent-%COMP%]   .temp-low[_ngcontent-%COMP%]{font-size:1.5rem;font-weight:500;color:#6c757d}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]   .weather-icon[_ngcontent-%COMP%]   .weather-emoji[_ngcontent-%COMP%]{font-size:3rem;filter:drop-shadow(0 2px 4px rgba(0,0,0,.1))}.weather-card[_ngcontent-%COMP%]   .weather-description[_ngcontent-%COMP%]{font-size:1rem;color:#6c757d;margin-bottom:1rem;text-align:center}.weather-card[_ngcontent-%COMP%]   .weather-details[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-bottom:1rem}.weather-card[_ngcontent-%COMP%]   .weather-details[_ngcontent-%COMP%]   .detail-item[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;font-size:.875rem}.weather-card[_ngcontent-%COMP%]   .weather-details[_ngcontent-%COMP%]   .detail-item[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-bottom:.25rem;color:#007bff}.weather-card[_ngcontent-%COMP%]   .weather-details[_ngcontent-%COMP%]   .detail-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#6c757d;font-weight:500}.weather-card[_ngcontent-%COMP%]   .special-condition[_ngcontent-%COMP%]   .alert[_ngcontent-%COMP%]{margin-bottom:0;padding:.5rem;font-size:.875rem;border-radius:.25rem}.weather-card[_ngcontent-%COMP%]   .special-condition[_ngcontent-%COMP%]   .alert[_ngcontent-%COMP%]   small[_ngcontent-%COMP%]{margin:0}.error-section[_ngcontent-%COMP%]   .alert[_ngcontent-%COMP%]{border-radius:.375rem;box-shadow:0 .125rem .25rem #00000013}.loading-section[_ngcontent-%COMP%]   .loading-spinner[_ngcontent-%COMP%]{padding:3rem 0}.loading-section[_ngcontent-%COMP%]   .loading-spinner[_ngcontent-%COMP%]   .spinner-border[_ngcontent-%COMP%]{width:3rem;height:3rem}.loading-section[_ngcontent-%COMP%]   .loading-spinner[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#fff;font-size:1.1rem;margin:0}.footer[_ngcontent-%COMP%]{background:#ffffff1a;-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);border-top:1px solid rgba(255,255,255,.2);padding:1rem 0;margin-top:auto}.footer[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#fffc;margin:0}.footer[_ngcontent-%COMP%]   p.text-muted[_ngcontent-%COMP%]{color:#fff9!important}@media (max-width: 768px){.header[_ngcontent-%COMP%]{text-align:center}.header[_ngcontent-%COMP%]   .app-title[_ngcontent-%COMP%]{font-size:1.5rem}.header[_ngcontent-%COMP%]   .app-subtitle[_ngcontent-%COMP%]{font-size:.875rem}.header[_ngcontent-%COMP%]   .status-indicator[_ngcontent-%COMP%]{margin-top:1rem}.main-content[_ngcontent-%COMP%]{padding:1rem 0}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]{flex-direction:column;text-align:center}.weather-card[_ngcontent-%COMP%]   .temperature-section[_ngcontent-%COMP%]   .weather-icon[_ngcontent-%COMP%]{margin-top:.5rem}.weather-details[_ngcontent-%COMP%]{flex-wrap:wrap;gap:1rem;justify-content:center}.suggestions-dropdown[_ngcontent-%COMP%]{max-height:250px}}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.weather-card[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_fadeIn .5s ease}.suggestions-dropdown[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_fadeIn .2s ease}\"]\n      });\n    }\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}