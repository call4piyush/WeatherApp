# Production environment configuration
global:
  environment: production
  imageRegistry: ghcr.io
  domain: weather-app.k8s.example.com

# Backend configuration for production
backend:
  replicaCount: 5
  
  image:
    tag: latest
    pullPolicy: IfNotPresent

  ingress:
    enabled: true
    hosts:
      - host: api.weather-app.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: weather-backend-prod-tls
        hosts:
          - api.weather-app.example.com

  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi

  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 20
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70

  env:
    SPRING_PROFILES_ACTIVE: production
    LOGGING_LEVEL_COM_WEATHERAPP: INFO
    MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
    JVM_OPTS: "-Xms1g -Xmx1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"

  # Production-grade affinity rules
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - backend
            topologyKey: kubernetes.io/hostname
        - weight: 50
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - backend
            topologyKey: topology.kubernetes.io/zone

# Frontend configuration for production
frontend:
  replicaCount: 6
  
  image:
    tag: latest
    pullPolicy: IfNotPresent

  ingress:
    enabled: true
    hosts:
      - host: weather-app.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: weather-frontend-prod-tls
        hosts:
          - weather-app.example.com

  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi

  autoscaling:
    enabled: true
    minReplicas: 6
    maxReplicas: 30
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70

  # Production-grade affinity rules
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - frontend
            topologyKey: kubernetes.io/hostname
        - weight: 50
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - frontend
            topologyKey: topology.kubernetes.io/zone

# PostgreSQL configuration for production
postgresql:
  enabled: true
  auth:
    postgresPassword: "production-postgres-password-change-me"
    username: "weatheruser"
    password: "production-weather-password-change-me"
    database: "weatherdb"
  
  architecture: replication
  
  primary:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "premium-ssd"
    
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi

    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: primary
              topologyKey: kubernetes.io/hostname

  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "premium-ssd"
    
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s

# Configuration for production
config:
  weather:
    cache:
      ttl: 600 # 10 minutes
    forecast:
      days: 5 # More days for production
    fallback:
      enabled: true
      dataAgeThreshold: 1440 # 24 hours

  city:
    search:
      cache:
        ttl: 3600 # 1 hour
      maxResults: 10
      minQueryLength: 2

# ServiceMonitor for production
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels:
    release: prometheus

# Pod Disruption Budget for production
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network policies for production (strict)
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 8080
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # DNS
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # HTTPS for external APIs
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # Database
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgresql
      ports:
        - protocol: TCP
          port: 5432

# Pod annotations for production
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/actuator/prometheus"
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"

# Additional labels for production
podLabels:
  environment: production
  team: weather-app
  version: production
  tier: application

# Security context for production
backend:
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault

frontend:
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 101
    seccompProfile:
      type: RuntimeDefault

# Resource quotas and limits for production
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

# Horizontal Pod Autoscaler behavior for production
backend:
  autoscaling:
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 10
            periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
          - type: Percent
            value: 50
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60

frontend:
  autoscaling:
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 20
            periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 30
        policies:
          - type: Percent
            value: 100
            periodSeconds: 30
          - type: Pods
            value: 4
            periodSeconds: 30 